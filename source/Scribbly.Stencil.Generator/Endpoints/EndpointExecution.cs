using Microsoft.CodeAnalysis;

namespace Scribbly.Stencil.Endpoints;

public class EndpointHandleExecution
{
    /// <summary>
    /// Writes the captured information about the handle method as a Minimal API endpoint.
    /// </summary>
    /// <param name="context">Generator Context</param>
    /// <param name="subject">Captured Method Context</param>
    public static void Execute(SourceProductionContext context, TargetMethodCaptureContext subject)
    {
        var @namespace = $"namespace {subject.Namespace ?? string.Empty}";

        var handlerCode = $@"
// <auto-generated/> @{DateTime.UtcNow}
{@namespace};

#nullable enable

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;

public static partial class {subject.TypeName}
{{
{subject.CreateEndpointMappingMethod()}
}}
";
        var handleName = subject.Namespace is null ? subject.TypeName : $"{subject.Namespace}.{subject.TypeName}.{subject.MethodName}";
        context.AddSource($"{handleName}.g.cs", handlerCode);
    }
}

public static class TargetMethodBuilderExtensions
{
    public static string CreateEndpointMappingMethod(this TargetMethodCaptureContext subject)
    {
        if (subject.HasConfigurationHandler)
        {
            return $@"    
    /// <summary>
    /// Maps the method {subject.MethodName} to an Endpoint group with the Route {subject.HttpMethod?.ToUpper()} {subject.HttpRoute} and configures the endpoint with the provided options.
    /// </summary>
    public static global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder Map{subject.TypeName}{subject.MethodName}Endpoint(this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder)
    {{
        var endpoint = builder.Map{subject.HttpMethod}(""{subject.HttpRoute}"", {subject.MethodName});
        
        Configure{subject.TypeName}{subject.MethodName}Endpoint(endpoint);

        return builder;
    }}

        static partial void Configure{subject.TypeName}{subject.MethodName}Endpoint(IEndpointConventionBuilder builder);";
        }
        
        return $@"    
    /// <summary>
    /// Maps the method {subject.MethodName} to an Endpoint group with the Route {subject.HttpMethod?.ToUpper()} {subject.HttpRoute}.
    /// </summary>
    public static global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder Map{subject.TypeName}{subject.MethodName}Endpoint(this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder)
    {{
        builder.Map{subject.HttpMethod}(""{subject.HttpRoute}"", {subject.MethodName});
        return builder;
    }}";
    }
}