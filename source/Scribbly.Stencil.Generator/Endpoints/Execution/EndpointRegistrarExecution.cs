using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Scribbly.Stencil.Builder.Context;
using Scribbly.Stencil.Endpoints.Factories;

namespace Scribbly.Stencil.Endpoints;

public class EndpointRegistrarExecution
{
    public static void Generate(SourceProductionContext context,
        (ImmutableArray<TargetMethodCaptureContext> endpoints, BuilderCaptureContext? builder) captureContext)
    {
        var (endpoints, builder) = captureContext;
        if (endpoints.IsDefaultOrEmpty)
            return;

        var sb = new StringBuilder($@"
// <auto-generated/> @{DateTime.UtcNow}
#nullable enable

using System;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;");
        sb.AppendLine();

        foreach (var ns in endpoints
                     .GroupBy(e => e.Namespace)
                     .Select(g => g.First())
                     .Select(n => n.Namespace))
        {
            sb.AppendLine($"using {ns};");
        }

        sb.AppendLine(@"
namespace Scribbly.Stencil;

public static class ScribblyEndpointRegistry
{
    /// <summary>
    /// Maps the endpoints collected to the group or application.
    /// </summary>
");
        sb.CreateEndpointRegistrationMethodSignature(builder);
        sb.AppendLine("{");
        foreach (var endpoint in endpoints.Distinct(TargetMethodCaptureContextComparer.Instance))
        {
            sb.Append("        builder.").CreateEndpointMappingMethodInvocation(subject: endpoint, builder).AppendLine(); 
        }

        sb.AppendLine("""
                              return builder;
                          } 
                      }
                      """);
        context.AddSource($"Registrar.Scribbly.Stencil.EndpointRegistry.g.cs", sb.ToString());
    }
}