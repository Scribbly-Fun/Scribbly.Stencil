using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Scribbly.Stencil.Endpoints;

public class EndpointRegistrarExecution
{
    public static void Generate(SourceProductionContext context,
        ImmutableArray<TargetMethodCaptureContext> endpoints)
    {
        if (endpoints.IsDefaultOrEmpty)
            return;

        var sb = new StringBuilder($@"
// <auto-generated/> @{DateTime.UtcNow}
#nullable enable

using System;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;");
        sb.AppendLine();

        foreach (var ns in endpoints
                     .GroupBy(e => e.Namespace)
                     .Select(g => g.First())
                     .Select(n => n.Namespace))
        {
            sb.AppendLine($"using {ns};");
        }

        sb.AppendLine(@"
namespace Scribbly.Stencil;

public static class ScribblyEndpointRegistry
{
    /// <summary>
    /// Maps the endpoints collected to the group or application.
    /// </summary>
    public static global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder MapScribblyEndpoints(this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder)
    {
        // TODO: Insert Endpoint Group Captured into the Map Method Name, These endpoints should be passed the correct endpoint group build or the root builder if not specified.
");
        foreach (var endpoint in endpoints.Distinct(TargetMethodCaptureContextComparer.Instance))
        {
            sb.AppendLine($@"        builder.Map{endpoint.TypeName}{endpoint.MethodName}Endpoint();");
        }

        sb.AppendLine(@"        return builder;
    } 
}");
        context.AddSource($"EndpointRegistry.g.cs", sb.ToString());
    }
}