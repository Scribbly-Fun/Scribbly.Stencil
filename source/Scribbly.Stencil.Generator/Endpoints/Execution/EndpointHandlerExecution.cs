using Microsoft.CodeAnalysis;
using Scribbly.Stencil.Endpoints.Context;

namespace Scribbly.Stencil.Endpoints.Execution;

public static class EndpointHandlerExecution
{
    /// <summary>
    /// Writes the captured information about the handle method as a Minimal API endpoint.
    /// </summary>
    /// <param name="context">Generator Context</param>
    /// <param name="subject">Captured Method Context</param>
    public static void Generate(SourceProductionContext context, TargetMethodCaptureContext subject)
    {
        var @namespace = subject.Namespace is not null 
            ? $"namespace {subject.Namespace};"
            : string.Empty;

        var handlerCode = $@"
// <auto-generated/> @{DateTime.UtcNow}
#nullable enable

using Scribbly.Stencil;

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;

{@namespace}

public static partial class {subject.TypeName}
{{
    /// <summary>
    /// Maps the method {subject.MethodName} to an Endpoint group with the Route {subject.HttpMethod?.ToUpper()} {subject.HttpRoute}.
    /// </summary>
    public static global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder Map{subject.TypeName}{subject.MethodName}Endpoint(this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder)
    {{
        var endpoint = builder.Map{subject.HttpMethod}(""{subject.HttpRoute}"", {subject.MethodName});

        Configure{subject.MethodName}(endpoint);
        
{subject.AddApiDocumentation()}
        
        return builder;
    }}

    static partial void Configure{subject.MethodName}(IEndpointConventionBuilder builder);
}}
";
        var handlerName = subject.Namespace is null ? $"{subject.TypeName}.{subject.MethodName}" : $"{subject.Namespace}.{subject.TypeName}.{subject.MethodName}";
        context.AddSource($"Handler.{handlerName}.g.cs", handlerCode);
    }

    private static string AddApiDocumentation(this TargetMethodCaptureContext subject)
    {
        return subject switch
        {
            { Name: not null, Description: null } => $"""
                                                              endpoint.WithName("{subject.Name}");
                                                      """,
            { Name: null, Description: not null } => $"""
                                                              endpoint.WithDescription("{subject.Description}");
                                                      """,
            { Name: not null, Description: not null } =>
                $"""
                         endpoint
                             .WithName("{subject.Name}")
                             .WithDescription("{subject.Description}");
                 """,
            _ => string.Empty
        };
    }
}