using System.Text;
using Scribbly.Stencil.Endpoints;
using Scribbly.Stencil.Groups;

namespace Scribbly.Stencil.Builder.Factories;

public static class ExtensionClassFactory
{
    public static StringBuilder CreateServiceRegistrar(this StringBuilder builder, IReadOnlyCollection<TargetMethodCaptureContext> endpoints, IReadOnlyCollection<TargetGroupCaptureContext> groups)
    {
        return builder
            .CreateServiceRegistrarHeader()
            .CreateServiceRegistrarEndpoints(endpoints)
            .CreateServiceRegistrarGroups(groups)
            .AppendLine("""
                                return services;
                            }
                        }
                        """);
    }
    
    private static StringBuilder CreateServiceRegistrarHeader(this StringBuilder builder)
    {
        return builder.AppendLine(
$$"""
  // <auto-generated/>
  #nullable enable
  
  using Microsoft.Extensions.DependencyInjection;
  
  namespace Scribbly.Stencil;

  /// <summary>
  /// Extensions used to register the Stencil application with your DI container.
  /// </summary>
  public static class {{BuilderExtensionsClass.TypeName}}
  {
      /// <summary>
      /// Registers all stencil groups and endpoints in the DI container.
      /// <remarks>When utilized all Groups and Endpoints will be resolved from the container.</remarks>
      /// </summary>
      public static IServiceCollection AddStencil(this IServiceCollection services)
      {
  """);
    }
    
    private static StringBuilder CreateServiceRegistrarEndpoints(this StringBuilder builder, IReadOnlyCollection<TargetMethodCaptureContext> endpoints)
    {
        builder.AppendLine("        // --------------------> Endpoint registration <--------------------");
        foreach (var endpoint in endpoints)
        {
            builder.Append("        services.AddTransient<global::").Append(endpoint.Namespace).Append('.').Append(endpoint.TypeName).Append(">();");
            builder.AppendLine();
        }
        builder.AppendLine();
        return builder;
    }
    
    private static StringBuilder CreateServiceRegistrarGroups(this StringBuilder builder, IReadOnlyCollection<TargetGroupCaptureContext> groups)
    {
        builder.AppendLine("        // --------------------> Group registration <--------------------");
        foreach (var group in groups)
        {
            builder.Append("        services.AddTransient<global::").Append(group.Namespace).Append('.').Append(group.TypeName).Append(">();");
            builder.AppendLine();
        }
        builder.AppendLine();
        return builder;
    }
}