using Microsoft.CodeAnalysis;
using Scribbly.Stencil.Factories;

namespace Scribbly.Stencil.Groups;

public static class GroupBuilderExecution
{
    /// <summary>
    /// Writes the captured information about the handle method as a Minimal API endpoint.
    /// </summary>
    /// <param name="context">Generator Context</param>
    /// <param name="subject">Captured Method Context</param>
    public static void Generate(SourceProductionContext context, TargetGroupCaptureContext subject)
    {
        if (subject.IsConfigurable)
        {
            GenerateConfigurableGroup(context, subject);
            return;
        }
        
        GenerateSimpleGroup(context, subject);
    }
    
    private static void GenerateConfigurableGroup(SourceProductionContext context, TargetGroupCaptureContext subject)
    {
        var @namespace = subject.Namespace is not null 
            ? $"namespace {subject.Namespace};"
            : string.Empty;
        
        var span = new Span<char>(subject.TypeName!.ToCharArray());

        span[0] = char.ToLowerInvariant(span[0]);

        var builderParameter = new string(span.ToArray());

        var groupCode = FileHeaderFactory.CreateFileHeader()
            .AppendLine("""
                        using Microsoft.AspNetCore.Builder;
                        using Microsoft.AspNetCore.Http;
                        using Microsoft.AspNetCore.Mvc;
                        using Microsoft.AspNetCore.Routing;
                        """)
            .AppendLine(@namespace)
            .AppendLine($$"""
              public partial class {{subject.TypeName}}: global::{{subject.Namespace}}.{{subject.TypeName}}.I{{subject.TypeName}}Configure, global::Scribbly.Stencil.IGroup
              {
                  public interface I{{subject.TypeName}}Configure: global::Scribbly.Stencil.{{ConfigureMarkerInterface.TypeName}}
                  {
                      void Configure(global::Microsoft.AspNetCore.Routing.RouteGroupBuilder {{builderParameter}}Builder);
                  }

                  /// <summary>
                  /// Maps the endpoint group {{subject.TypeName}} to a endpoint builder with the routing prefix {{subject.TypeName}}.
                  /// </summary>
                  public global::Microsoft.AspNetCore.Routing.RouteGroupBuilder Map{{subject.TypeName}}(global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder)
                  {
                      var group = builder.MapGroup("{{subject.RoutePrefix}}");

                      Configure(group);
                      
                      {{subject.AddApiDocumentation()}}
                      
                      return group;
                  }
              }
              """);
        var groupName = subject.Namespace is null ? $"{subject.TypeName}" : $"{subject.Namespace}.{subject.TypeName}";
        context.AddSource($"Group.{groupName}.g.cs", groupCode.ToString());
    }
    
    private static void GenerateSimpleGroup(SourceProductionContext context, TargetGroupCaptureContext subject)
    {
        var @namespace = subject.Namespace is not null 
            ? $"namespace {subject.Namespace};"
            : string.Empty;

        var handlerCode = 
            $$"""

              // <auto-generated/> @{{DateTime.UtcNow}} @GroupBuilderExecution.cs
              #nullable enable

              using Scribbly.Stencil;

              using Microsoft.AspNetCore.Builder;
              using Microsoft.AspNetCore.Http;
              using Microsoft.AspNetCore.Mvc;
              using Microsoft.AspNetCore.Routing;

              {{@namespace}}

              public partial class {{subject.TypeName}}: global::Scribbly.Stencil.IGroup
              {
                  /// <summary>
                  /// Maps the endpoint group {{subject.TypeName}} to a endpoint builder with the routing prefix {{subject.TypeName}}.
                  /// </summary>
                  public global::Microsoft.AspNetCore.Routing.RouteGroupBuilder Map{{subject.TypeName}}(global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder)
                  {
                      var group = builder.MapGroup("{{subject.RoutePrefix}}");

                      {{subject.AddApiDocumentation()}}
                      
                      return group;
                  }
              }
              """;
        var groupName = subject.Namespace is null ? $"{subject.TypeName}" : $"{subject.Namespace}.{subject.TypeName}";
        context.AddSource($"Group.{groupName}.g.cs", handlerCode);
    }

    private static string AddApiDocumentation(this TargetGroupCaptureContext subject)
    {
        return subject switch
        {
            { Tag: not null} => $"""
                                 group.WithTags("{subject.Tag}");
                                 """,
            _ => string.Empty
        };
    }
}