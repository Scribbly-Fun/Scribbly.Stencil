using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Scribbly.Stencil.Endpoints.Context;

namespace Scribbly.Stencil.Groups;

public class GroupRegistrarExecution
{
    private class GroupItem
    {
        public string? GroupName { get; set; }
        public TargetGroupCaptureContext? Context { get; set; }

        public List<GroupItem> Children { get; set; } = [];

        public bool IsParent => Children.Any();
        public GroupItem(string groupName)
        {
            GroupName = groupName;
        }
        
        public GroupItem(string groupName, TargetGroupCaptureContext? context)
        {
            GroupName = groupName;
            Context = context;
        }
        
        public GroupItem(string groupName, TargetGroupCaptureContext context, List<GroupItem> children)
        {
            GroupName = groupName;
            Context = context;
            Children = children;
        }
        
    }
    
    private static GroupItem GetOrCreateNode(ConcurrentDictionary<string, GroupItem> map, string id, TargetGroupCaptureContext? context)
    {
        return map.AddOrUpdate(id,
            (key) => new GroupItem(key, context),
            (k, v) =>
            {
                if (context is null)
                {
                    return v;
                }
                return new GroupItem(k, context);
            });
        // if (map.TryGetValue(id, out var existing))
        // {
        //     existing.Context = context;
        //     return existing;
        // }
        //
        // var node = new GroupItem(id, context);
        // map.Add(id, node);
        //
        // return node;
    }

    private static ConcurrentDictionary<string, GroupItem>? CreateTree(ImmutableArray<TargetGroupCaptureContext> groups)
    {
        if (groups.IsDefaultOrEmpty)
        {
            return null;
        }
        
        if (groups.IsDefaultOrEmpty)
        {
            return null;
        }

        var map = new ConcurrentDictionary<string, GroupItem>();  
        
        foreach (var group in groups)
        {
            if (group.MemberOf is null)
            {
                GetOrCreateNode(map, $"{group.Namespace}.{group.TypeName}", group);
            }
            else
            {
                GetOrCreateNode(map, group.MemberOf, null).Children.Add(GetOrCreateNode(map, $"{group.Namespace}.{group.TypeName}", group));
            }
        }
        
        return map; // Return the root node
    }
    
    public static void Generate(SourceProductionContext context, (ImmutableArray<TargetMethodCaptureContext> Endpoints, ImmutableArray<TargetGroupCaptureContext> Groups) tree)
    {
        var (endpoints, groups) = tree;

        var groupDictionary = CreateTree(groups);
        
        if (groups.IsDefaultOrEmpty)
            return;

        var sb = new StringBuilder($$"""
                                     // <auto-generated/> @{{DateTime.UtcNow}}
                                     #nullable enable

                                     using System;
                                     using Microsoft.AspNetCore.Builder;
                                     using Microsoft.AspNetCore.Http;
                                     using Microsoft.AspNetCore.Mvc;
                                     using Microsoft.AspNetCore.Routing;
                                     
                                     {{GroupUsingStatements(groups, endpoints)}}

                                     public static class GroupRegistrationExtensions
                                     {
                                         public static global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder MapApplicationEndpoints(this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder app)
                                         {                            
                                     """);

        if (groupDictionary is not null)
        {
            sb.AppendLine();
            DebugTree(sb, groupDictionary, false);
            
            foreach (var group in groupDictionary)
            {
                if (!group.Value.IsParent)
                {
                    continue;
                }

                var builderName = CreateGroupName(group.Value.Context);
                
                sb.AppendLine(
                    $"""
                            var {builderName} = app.Map{group.Value.Context?.TypeName}();
                     """);

                var groupsEndpoints = endpoints.Where(e => e.MemberOf == group.Key);

                foreach (var groupsEndpoint in groupsEndpoints)
                {
                    sb.AppendLine(
                        $"""
                                //MapLunchEndpointsGetLunchMenuEndpoint
                                {builderName}.Map{groupsEndpoint.TypeName}{groupsEndpoint.MethodName}Endpoint();
                         """);
                    
                    sb.AppendLine();
                }
                
                foreach (var childGroup in group.Value.Children)
                {
                    var childGroupBuilderName = CreateGroupName(childGroup.Context);

                    sb.AppendLine(
                        $"""
                                var {childGroupBuilderName} = {builderName}.Map{childGroup.Context?.TypeName}();
                         """);
                    
                    var childGroupEndpoints = endpoints.Where(e => e.MemberOf == childGroup.GroupName);

                    foreach (var childGroupEndpoint in childGroupEndpoints)
                    {
                        sb.AppendLine(
                            $"""
                                    //MapLunchEndpointsGetLunchMenuEndpoint
                                    {childGroupBuilderName}.Map{childGroupEndpoint.TypeName}{childGroupEndpoint.MethodName}Endpoint();
                             """);
                    
                        sb.AppendLine();
                    }
                    
                    sb.AppendLine();
                }
            }
        }
        
        sb.AppendLine("""
                                return app;
                            }
                      }
                      """);
        context.AddSource($"Registrar.Scribbly.Stencil.GroupRegistry.g.cs", sb.ToString());
    }


    private static string CreateGroupName(TargetGroupCaptureContext? context)
    {
        return $"{context?.Namespace}_{context?.TypeName}".Replace(".", "_").ToLower();
    }
    
    private static string GroupUsingStatements(ImmutableArray<TargetGroupCaptureContext> groups, ImmutableArray<TargetMethodCaptureContext> endpoints)
    {
        var builder = new StringBuilder();
        var namespaces = new List<string?>();
        
        namespaces.AddRange(groups.Select(g => g.Namespace));
        namespaces.AddRange(endpoints.Select(g => g.Namespace));
        
        foreach (var name in namespaces.Distinct())
        {
            builder.AppendLine($"using {name};");
        }
        return builder.ToString();
    }

    private static StringBuilder DebugTree(StringBuilder sb, ConcurrentDictionary<string, GroupItem> groupDictionary, bool enable)
    {
        if (!enable)
        {
            return sb;
        }
        foreach (var group in groupDictionary)
        {
            sb.AppendLine();
            sb.AppendLine(
                $"// ----> KEY: {group.Key} NAME: {group.Value.GroupName} TYPE: {group.Value.Context?.TypeName}");
            foreach (var valueChild in group.Value.Children)
            {
                sb.AppendLine(
                    $"//          ---------------> CHILD: {valueChild.GroupName} TYPE: {valueChild.Context?.TypeName}");

                if (valueChild.IsParent)
                {
                    foreach (var childsChild in valueChild.Children)
                    {
                        sb.AppendLine(
                            $"//          ------------------------> CHILD Of CHILD: {childsChild.GroupName} TYPE: {childsChild.Context?.TypeName}");
                    }
                }
            }
        }
        
        return sb;
    }

}