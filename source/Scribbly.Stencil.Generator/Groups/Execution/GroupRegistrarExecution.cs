using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Scribbly.Stencil.Endpoints.Context;

namespace Scribbly.Stencil.Groups;

public class GroupRegistrarExecution
{
    public static void Generate(SourceProductionContext context, (ImmutableArray<TargetMethodCaptureContext> Endpoints, ImmutableArray<TargetGroupCaptureContext> Groups) tree)
    {
        var (endpoints, groups) = tree;

        var groupMap = groups.ToDictionary(
            g => $"{g.Namespace}.{g.TypeName}",
            v => new GroupItem($"{v.Namespace}.{v.TypeName}", v));
        
        var groupDictionary = CreateTree(groupMap);
        
        if (groups.IsDefaultOrEmpty)
            return;

        var sb = new StringBuilder($$"""
                                     // <auto-generated/> @{{DateTime.UtcNow}}
                                     #nullable enable

                                     using System;
                                     using Microsoft.AspNetCore.Builder;
                                     using Microsoft.AspNetCore.Http;
                                     using Microsoft.AspNetCore.Mvc;
                                     using Microsoft.AspNetCore.Routing;
                                     
                                     {{GroupUsingStatements(groups, endpoints)}}

                                     public static class GroupRegistrationExtensions
                                     {
                                         public static global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder MapScribblyApp(this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder app)
                                         {                            
                                     """);
        
        sb.AppendLine();
        DebugTree(sb, groupDictionary, false);
        
        foreach (var root in groupDictionary)
        {
            EmitGroup(sb, root, endpoints, parentBuilderName: "app");
        }

        sb.AppendLine("""
                              return app;
                          }
                      }
                      """);
        context.AddSource($"Registrar.Scribbly.Stencil.GroupRegistry.g.cs", sb.ToString());
    }
    
    private static List<GroupItem> CreateTree(Dictionary<string, GroupItem> map)
    {
        var childKeys = new HashSet<string>();

        foreach (var kvp in map)
        {
            var group = kvp.Value;

            if (!string.IsNullOrEmpty(group.Context?.MemberOf))
            {
                if (map.TryGetValue(group.Context?.MemberOf!, out var parent))
                {
                    parent.Children.Add(group);
                    childKeys.Add(group.GroupName!);
                }
            }
        }
        
        return map
            .Where(kvp => !childKeys.Contains(kvp.Key))
            .Select(kvp => kvp.Value)
            .ToList();
    }
    
    private static void EmitGroup(
        StringBuilder sb,
        GroupItem group,
        ImmutableArray<TargetMethodCaptureContext> endpoints,
        string parentBuilderName)
    {
        var builderName = CreateGroupName(group.Context);
        sb.AppendLine($"        var {builderName} = {parentBuilderName}.Map{group.Context?.TypeName}();");

        var groupEndpoints = endpoints.Where(e => e.MemberOf == group.GroupName);
        foreach (var endpoint in groupEndpoints)
        {
            sb.AppendLine($"        {builderName}.Map{endpoint.TypeName}{endpoint.MethodName}Endpoint();");
        }

        foreach (var child in group.Children)
        {
            EmitGroup(sb, child, endpoints, builderName);
        }
    }
    
    private static string GroupUsingStatements(ImmutableArray<TargetGroupCaptureContext> groups, ImmutableArray<TargetMethodCaptureContext> endpoints)
    {
        var builder = new StringBuilder();
        var namespaces = new List<string?>();
        
        namespaces.AddRange(groups.Select(g => g.Namespace));
        namespaces.AddRange(endpoints.Select(g => g.Namespace));
        
        foreach (var name in namespaces.Distinct())
        {
            builder.AppendLine($"using {name};");
        }
        return builder.ToString();
    }
    
    private static string CreateGroupName(TargetGroupCaptureContext? context)
    {
        return $"{context?.Namespace}_{context?.TypeName}".Replace(".", "_").ToLower();
    }
    
    
    private static StringBuilder DebugTree(StringBuilder sb, List<GroupItem> groupDictionary, bool enable)
    {
        if (!enable)
        {
            return sb;
        }
        foreach (var group in groupDictionary)
        {
            sb.AppendLine();
            sb.AppendLine(
                $"// ----> KEY: {group.GroupName} NAME: {group.GroupName} TYPE: {group.Context?.TypeName}");
            
            sb.AppendLine($"// GROUP KEY: {group.GroupName}");
            sb.AppendLine($"// ENDPOINT MEMBEROF: {group.Context?.MemberOf}");
            
            foreach (var valueChild in group.Children)
            {
                sb.AppendLine(
                    $"//          ---------------> CHILD: {valueChild.GroupName} TYPE: {valueChild.Context?.TypeName}");

                if (valueChild.IsParent)
                {
                    foreach (var childsChild in valueChild.Children)
                    {
                        sb.AppendLine(
                            $"//          ------------------------> CHILD Of CHILD: {childsChild.GroupName} TYPE: {childsChild.Context?.TypeName}");
                    }
                }
            }
        }
        
        return sb;
    }

}