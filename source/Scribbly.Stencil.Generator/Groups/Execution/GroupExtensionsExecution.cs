using Microsoft.CodeAnalysis;

namespace Scribbly.Stencil.Groups;

public static class GroupExtensionsExecution
{
    /// <summary>
    /// Writes the captured information about the handle method as a Minimal API endpoint.
    /// </summary>
    /// <param name="context">Generator Context</param>
    /// <param name="subject">Captured Method Context</param>
    public static void Generate(SourceProductionContext context, TargetGroupCaptureContext subject)
    {
        var @namespace = subject.Namespace is not null 
            ? $"namespace {subject.Namespace};"
            : string.Empty;
        
        var builderExtensionCode = 
            $$"""
              // <auto-generated/> @{{DateTime.UtcNow}}
              #nullable enable

              using Scribbly.Stencil;

              using Microsoft.AspNetCore.Builder;
              using Microsoft.AspNetCore.Http;
              using Microsoft.AspNetCore.Mvc;
              using Microsoft.AspNetCore.Routing;

              {{@namespace}}

              public static class {{subject.TypeName}}Extensions
              {
                  /// <summary>
                  /// Maps the endpoint group {{subject.TypeName}} to a endpoint builder with the routing prefix {{subject.TypeName}}.
                  /// </summary>
                  public static global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder Map{{subject.TypeName}}(this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder)
                  {
                      var scribblyGroup = new global::{{subject.Namespace}}.{{subject.TypeName}}();

                      var routeGroup = scribblyGroup.Map{{subject.TypeName}}(builder);
                      
                      return routeGroup;
                  }
              }
              """;
        var groupName = subject.Namespace is null ? $"{subject.TypeName}" : $"{subject.Namespace}.{subject.TypeName}";
        context.AddSource($"Group.{groupName}.Extensions.g.cs", builderExtensionCode);
    }

}